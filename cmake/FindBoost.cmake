message(STATUS "Boost finder pacakge for conans' monolithic boost")
set(Boost_INCLUDE_DIRS ${CONAN_INCLUDE_DIRS_BOOST})
set(Boost_LIBRARY_DIRS ${CONAN_LIB_DIRS_BOOST})
set(Boost_LIBRARIES ${CONAN_LIBS_BOOST})

if(NOT TARGET Boost::boost)
    add_library(Boost::boost INTERFACE IMPORTED)
    set_target_properties(Boost::boost PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIRS})
endif()

if(NOT TARGET Boost::diagnostic_definitions)
    add_library(Boost::diagnostic_definitions INTERFACE IMPORTED)
    if(WIN32)
        set(Boost_LIB_DIAGNOSTIC_DEFINITIONS "-DBOOST_LIB_DIAGNOSTIC")
        set_target_properties(Boost::diagnostic_definitions PROPERTIES INTERFACE_COMPILE_DEFINITIONS "BOOST_LIB_DIAGNOSTIC")
    endif()
endif()

if(NOT TARGET Boost::disable_autolinking)
    add_library(Boost::disable_autolinking INTERFACE IMPORTED)
    if(WIN32)
        set_target_properties(Boost::disable_autolinking PROPERTIES INTERFACE_COMPILE_DEFINITIONS "BOOST_ALL_NO_LIB")
    endif()
endif()

if(NOT TARGET Boost::dynamic_linking)
    add_library(Boost::dynamic_linking INTERFACE IMPORTED)
    if(WIN32)
        set_target_properties(Boost::dynamic_linking PROPERTIES INTERFACE_COMPILE_DEFINITIONS "BOOST_ALL_DYN_LINK")
    endif()
endif()

foreach(boost_component IN ITEMS ${CONAN_LIBS_BOOST})
	STRING(REPLACE "boost_" "" boostless_component_name "${boost_component}")
	STRING(REPLACE "lib" "" component_name "${boostless_component_name}")
	set(boost_target_name "Boost::${component_name}")
	if (NOT TARGET ${boost_target_name} )
		add_library(${boost_target_name} INTERFACE IMPORTED)
		target_link_libraries(${boost_target_name} INTERFACE CONAN_PKG::boost)
		message(STATUS "${boost_target_name} target created")
	endif()
endforeach()

# extract boost version from boost/version.hpp (boost config)
set(Boost_VERSION 0)
set(Boost_LIB_VERSION "")
# monolithic boost package (conan-center)
set(_boost_CONFIG_DIR "${CONAN_INCLUDE_DIRS_BOOST}")

file(STRINGS "${_boost_CONFIG_DIR}/boost/version.hpp" _boost_VERSION_HPP_CONTENTS REGEX "#define BOOST_(LIB_)?VERSION ")
unset(_boost_CONFIG_DIR)
set(_Boost_VERSION_REGEX "([0-9]+)")
set(_Boost_LIB_VERSION_REGEX "\"([0-9_]+)\"")
foreach(v VERSION LIB_VERSION)
	if("${_boost_VERSION_HPP_CONTENTS}" MATCHES "#define BOOST_${v} ${_Boost_${v}_REGEX}")
		set(Boost_${v} "${CMAKE_MATCH_1}")
	endif()
endforeach()
unset(_boost_VERSION_HPP_CONTENTS)

math(EXPR Boost_MAJOR_VERSION "${Boost_VERSION} / 100000")
math(EXPR Boost_MINOR_VERSION "${Boost_VERSION} / 100 % 1000")
math(EXPR Boost_SUBMINOR_VERSION "${Boost_VERSION} % 100")

set(Boost_FOUND TRUE)

message(STATUS "Boost_FOUND: ${Boost_FOUND}")
message(STATUS "Boost_VERSION: ${Boost_VERSION}")
message(STATUS "Boost_LIB_VERSION: ${Boost_LIB_VERSION}")
message(STATUS "Boost_MAJOR_VERSION: ${Boost_MAJOR_VERSION}")
message(STATUS "Boost_MINOR_VERSION: ${Boost_MINOR_VERSION}")
message(STATUS "Boost_SUBMINOR_VERSION: ${Boost_SUBMINOR_VERSION}")
message(STATUS "Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
message(STATUS "Boost_LIBRARY_DIRS: ${Boost_LIBRARY_DIRS}")
message(STATUS "Boost_LIBRARIES: ${Boost_LIBRARIES}")
